name: CI/CD for Flask API on Docker (Ubuntu)
on:
  push:
    branches:
      - main
permissions:
  actions: read
  contents: read
  id-token: write
  packages: read
  deployments: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # Étape 1 : Cloner le dépôt
      - name: Checkout code
        uses: actions/checkout@v3

      # Étape 2 : Configurer Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      # Étape 3 : Installer les dépendances et outils de rapport
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wkhtmltopdf
          pip install -r requirements.txt
          pip install pytest pytest-html coverage weasyprint

      # Étape 4 : Créer le dossier pour les rapports
      - name: Create reports directory
        run: mkdir -p reports

      # Étape 5 : Exécuter les tests unitaires avec génération de rapport
      - name: Run Unit tests
        run: |
          python -m unittest discover -s tests -p "test_unitaire.py" > reports/Unit_tests.txt
          python -c "
          from weasyprint import HTML
          import datetime
          html_content = f'''
          <html>
            <head><title>Units Tests Report</title></head>
            <body>
              <h1>Units Tests Reports</h1>
              <p>Date: {datetime.datetime.now()}</p>
              <pre>{open('reports/Unit_tests.txt').read()}</pre>
            </body>
          </html>
          '''
          with open('reports/Unit_tests.html', 'w') as f:
            f.write(html_content)
          HTML(string=html_content).write_pdf('reports/Unit_tests.pdf')
          "

      # Étape 6 : Exécuter les tests de performance avec génération de rapport
      - name: Run performance tests
        run: |
          python -m unittest discover -s tests -p "test_performance.py" > reports/performance_tests.txt
          python -c "
          from weasyprint import HTML
          import datetime
          html_content = f'''
          <html>
            <head><title>Performance Tests Report</title></head>
            <body>
              <h1>Performance Tests Report</h1>
              <p>Date: {datetime.datetime.now()}</p>
              <pre>{open('reports/performance_tests.txt').read()}</pre>
            </body>
          </html>
          '''
          with open('reports/performance_tests.html', 'w') as f:
            f.write(html_content)
          HTML(string=html_content).write_pdf('reports/performance_tests.pdf')
          "

      # Étape 7 : Upload les rapports comme artifacts
      - name: Upload test reports
        uses: actions/upload-artifact@v2
        with:
          name: test-reports
          path: reports/
          
      # Étape 8 : Connexion à Docker Hub
      #- name: Log in to Docker Hub
      #  uses: docker/login-action@v2
      #  with:
      #    username: ${{ secrets.DOCKER_USERNAME }}
      #    password: ${{ secrets.DOCKER_PASSWORD }}

      # Étape 9 : Déployer sur AWS EC2 via SSH
      - name: Deploy to AWS EC2
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AWS_SSH_KEY }}" > ~/.ssh/aws_key.pem
          chmod 600 ~/.ssh/aws_key.pem
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/aws_key.pem ubuntu@${{ secrets.AWS_SERVER_IP }} << 'EOF'
            cd "/CLONE PROJECT/projet_Cloud_Groupe5_ENSPY-5"
            git pull origin main
            source venv/bin/activate
            pip install -r requirements.txt
            pkill gunicorn || true
            nohup gunicorn --bind 0.0.0.0:5000 app:app &
          EOF
